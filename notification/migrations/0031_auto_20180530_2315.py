# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-05-30 13:15
from __future__ import unicode_literals

import re
from collections import namedtuple
from itertools import groupby
from operator import itemgetter

from django.db import migrations
from django.forms.models import model_to_dict

from notification.mixins import MessageTemplateStatus as Status
from radaro_utils import helpers

CHUNK_SIZE = 2000

Template = namedtuple('Template', ['id', 'parts'])


def migrate_sms_message_objects(apps, schema_editor):
    MerchantSMSMessage = apps.get_model('merchant', 'MerchantSMSMessage')
    OrderSMSMessage = apps.get_model('tasks', 'OrderSMSMessage')
    TemplateSMSMessage = apps.get_model('notification', 'TemplateSMSMessage')
    MerchantMessageTemplate = apps.get_model('notification', 'MerchantMessageTemplate')

    merchant_sms = MerchantSMSMessage.objects.all()
    order_sms = OrderSMSMessage.objects.select_related('order').all()

    sms_template_types = [Status.FOLLOW_UP_REMINDER, Status.FOLLOW_UP, Status.CUSTOMER_JOB_TERMINATED,
                          Status.CUSTOMER_JOB_STARTED, Status.COMPLETE_INVITATION, Status.INVITATION, Status.ANOTHER]
    invited_parts = ['invited to join', ]

    def parts(string):
        if 'invited to join' in string:
            return invited_parts
        return re.split(r'{{[^\}]*}}', string.replace('\r\n', '\n'))

    def get_templates():
        templates_list = MerchantMessageTemplate.objects.filter(template_type__in=sms_template_types).order_by(
            'merchant_id').values('merchant_id', 'id', 'text', 'template_type')
        grouped_list = groupby(templates_list, itemgetter('merchant_id'))
        _templates = {m_id: {t['template_type']: Template(t['id'], parts(t['text'])) for t in templs} for m_id, templs
                      in grouped_list}
        return _templates

    templates = get_templates()

    def get_sms_type(merchant_templates, text):
        if not text:
            return merchant_templates[Status.ANOTHER].id
        text = re.sub(r'\r\n|\n\n', '\n', text)
        for template in merchant_templates.values():
            is_correct = True
            for part in template.parts:
                if part not in text:
                    is_correct = False
                    break
            if is_correct:
                return template.id
        return merchant_templates[Status.ANOTHER].id

    def get_sms_data(sms_message):
        obj_dict = model_to_dict(sms_message, exclude=('id', 'message', 'smsmessage_ptr', 'merchant', 'order'))
        obj_dict['text'] = sms_message.message
        return obj_dict

    def sms_objects_generator(sms_list):
        for sms in sms_list:
            sms_data = get_sms_data(sms)

            if isinstance(sms, MerchantSMSMessage):
                merchant_id = sms.merchant_id
                order_id = None
            else:
                merchant_id = sms.order.merchant_id
                order_id = sms.order_id

            template_id = get_sms_type(templates[merchant_id], sms.message)
            yield TemplateSMSMessage(template_id=template_id, order_id=order_id, **sms_data)

    for sms_chunk in helpers.chunks(merchant_sms, n=CHUNK_SIZE, length=merchant_sms.count()):
        TemplateSMSMessage.objects.bulk_create(sms_objects_generator(sms_chunk))

    for sms_chunk in helpers.chunks(order_sms, n=CHUNK_SIZE, length=order_sms.count()):
        TemplateSMSMessage.objects.bulk_create(sms_objects_generator(sms_chunk))


class Migration(migrations.Migration):

    dependencies = [
        ('notification', '0030_auto_20180530_2205'),
    ]

    operations = [
        # migrations.RunPython(code=migrate_sms_message_objects, reverse_code=migrations.RunPython.noop)
    ]
