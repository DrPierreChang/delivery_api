# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-07-12 13:28
from __future__ import unicode_literals

import itertools
import operator

from django.contrib.contenttypes.models import ContentType
from django.db import migrations
from django.db.models.functions import TruncDate


# Setting bulk instance for alone prototypes
def fwd(apps, schema_migration):
    OrderPrototype = apps.get_model('tasks', 'OrderPrototype')
    BulkDelayedUpload = apps.get_model('tasks', 'BulkDelayedUpload')
    ExternalJob = apps.get_model('tasks', 'ExternalJob')
    alones = OrderPrototype.objects.filter(bulk__isnull=True, external_job__isnull=True).count()
    print('Found {} completely alone prototypes.{}'.format(alones, 'They should be deleted.' if alones else ''))
    assert alones == 0
    ext_jobs = OrderPrototype.objects.filter(bulk__isnull=True, external_job__isnull=False).values('external_job')
    sources = ExternalJob.objects.filter(id__in=ext_jobs).values('source_id', 'source_type_id').distinct()
    for source in sources:
        Source_class = ContentType.objects.get_for_id(source['source_type_id']).model_class()
        creator = Source_class.objects.select_related('creator').get(id=source['source_id']).creator
        ext = ExternalJob.objects.filter(**source)
        bulk = BulkDelayedUpload.objects.create(creator_id=creator.id, merchant_id=creator.merchant_id,
                                                method='external')
        prots = OrderPrototype.objects.filter(external_job__in=ext)
        prots_updated = prots.update(bulk=bulk)
        if prots_updated > 100:
            print('Too much prototypes: splitting by day.')
            sorted_prots = prots.annotate(date=TruncDate('created')).order_by('date').values('date', 'id')
            for date, ids in itertools.groupby(sorted_prots, operator.itemgetter('date')):
                new_bulk = BulkDelayedUpload.objects.create(creator_id=bulk.creator_id, merchant_id=bulk.merchant_id,
                                                            method='external')
                _prots_updated = prots.filter(id__in=[x['id'] for x in ids]).update(bulk=new_bulk)
                print('\tAdditional bulk ({}) was set for {} prototypes.'.format(new_bulk.id, _prots_updated))
            bulk.delete()
        else:
            print('New bulk ({}) was set for {} prototypes.'.format(bulk.id, prots_updated))


class Migration(migrations.Migration):

    dependencies = [
        ('tasks', '0117_auto_20180712_2303_2'),
        ('integrations', '0005_auto_20180717_0501_2')
    ]

    operations = [
        migrations.RunPython(code=fwd, reverse_code=migrations.RunPython.noop)
    ]
