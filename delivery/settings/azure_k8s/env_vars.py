import base64
import json

import environ

from django.core.exceptions import ImproperlyConfigured


env = environ.Env()
environ.Env.read_env()

try:
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION = env('AWS_S3_REGION')
    AWS_S3_SIGNATURE_VERSION = env('AWS_S3_SIGNATURE_VERSION')
except ImproperlyConfigured:
    pass

try:
    AZURE_ACCOUNT_NAME = env('AZURE_ACCOUNT_NAME')
    AZURE_ACCOUNT_KEY = env('AZURE_ACCOUNT_KEY')
    AZURE_CONTAINER = env('AZURE_CONTAINER')
except ImproperlyConfigured:
    pass

CELERY_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')

CORS_WHITELIST = env.list('CORS_WHITELIST')

CURRENT_HOST = env('CURRENT_HOST')
CLUSTER_NAME = env('CLUSTER_NAME')
CLUSTER_NUMBER = env('CLUSTER_NUMBER')

FRONTEND_URL = env('FRONTEND_URL')
CUSTOMER_FRONTEND_URL = env('CUSTOMER_FRONTEND_URL')

DB_HOST = env('DB_HOST')
DB_PASSWORD = env('DB_PASSWORD')
DB_USER = env('DB_USER')
try:
    DB_NAME = env('DB_NAME')
except ImproperlyConfigured:
    pass

try:
    READ_DB_HOST = env('READ_DB_HOST')
except ImproperlyConfigured:
    pass

ERROR_EMAIL_PREFIX = env('ERROR_EMAIL_PREFIX')
SERVER_EMAIL = env('SERVER_EMAIL')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_PREFIX = env('EMAIL_PREFIX')
ANYMAIL_SENDGRID_API_KEY = env('ANYMAIL_SENDGRID_API_KEY')

GA_ENABLED = env.bool('GA_ENABLED')
GOOGLE_ANALYTICS_PROPERTY_ID = env('GOOGLE_ANALYTICS_PROPERTY_ID')

GOOGLE_API_KEY = env('GOOGLE_API_KEY')
GOOGLE_API_PROXY = env('GOOGLE_API_PROXY')
GOOGLE_MAPS_V3_APIKEY = env('GOOGLE_MAPS_V3_APIKEY')

STATIC_FOLDER = env('STATIC_FOLDER')
MEDIA_FOLDER = env('MEDIA_FOLDER')

NEWRELIC_AVAILABILITY_TEST_ACTIVE = env.bool('NEWRELIC_AVAILABILITY_TEST_ACTIVE')
NEWRELIC_CELERY_ACTIVE = env.bool('NEWRELIC_CELERY_ACTIVE')
NEWRELIC_DJANGO_ACTIVE = env.bool('NEWRELIC_DJANGO_ACTIVE')
NEW_RELIC_ENV = env('NEW_RELIC_ENV')
NEW_RELIC_LICENSE_KEY = env('NEW_RELIC_LICENSE_KEY')

PINAX_STRIPE_PUBLIC_KEY = env('PINAX_STRIPE_PUBLIC_KEY')
PINAX_STRIPE_SECRET_KEY = env('PINAX_STRIPE_SECRET_KEY')

PUSH_NOTIFICATIONS_APNS_CERTIFICATE = env('PUSH_NOTIFICATIONS_APNS_CERTIFICATE')
PUSH_NOTIFICATIONS_GCM_API_KEY = env('PUSH_NOTIFICATIONS_GCM_API_KEY')
PUSH_NOTIFICATIONS_SANDBOX = env.bool('PUSH_NOTIFICATIONS_SANDBOX')

RADARO_ROUTER_TOKEN = env('RADARO_ROUTER_TOKEN')
RADARO_ROUTER_URL = env('RADARO_ROUTER_URL')
RADARO_SHORTENER_TOKEN = env('RADARO_SHORTENER_TOKEN')

REDIS_URL = env('REDIS_URL')
REDIS_URL_ROUTE_OPTIMISATION = env('REDIS_URL_ROUTE_OPTIMISATION')

SMS_ORIGINATOR = env('SMS_ORIGINATOR')
SMS_PASSWORD = env('SMS_PASSWORD')
SMS_ROUTE = env('SMS_ROUTE')
SMS_USER_NAME = env('SMS_USER_NAME')

UPTIME_BOT_ACTIVE = env.bool('UPTIME_BOT_ACTIVE')
UPTIME_BOT_VERIFICATION_TOKEN = env('UPTIME_BOT_VERIFICATION_TOKEN')

USE_CLOUDFRONT = env.bool('USE_CLOUDFRONT')
USE_COMPRESSOR = env.bool('USE_COMPRESSOR')
USE_HTTPS = env.bool('USE_HTTPS')

ADMIN_SITE_SUPERADMINS = env.list('ADMIN_SITE_SUPERADMINS')

DEFAULT_DISTANCE_SHOW_IN = env('DEFAULT_DISTANCE_SHOW_IN')
DEFAULT_DATE_FORMAT = env('DEFAULT_DATE_FORMAT')
LANGUAGE_CODE = env('LANGUAGE_CODE')
TIME_ZONE = env('TIME_ZONE')
DELIVER_ADDRESS_2_ENABLED = env.bool('DELIVER_ADDRESS_2_ENABLED')

SENTRY_ENABLED = env.bool('SENTRY_ENABLED')
SENTRY_DSN = env('SENTRY_DSN')
RAVEN_DSN = env('RAVEN_DSN')

try:
    SENTRY_TRACES_SAMPLE_RATE = env.float('SENTRY_TRACES_SAMPLE_RATE')
except ImproperlyConfigured:
    pass


ANDROID_SMS_VERIFICATION = json.loads(base64.b64decode(env('ANDROID_SMS_VERIFICATION')).decode())


SFTP_SERVER = env('SFTP_SERVER')
SFTP_USER = env('SFTP_USER')
SFTP_PASSWORD = env('SFTP_PASSWORD')
SFTP_PORT = env.int('SFTP_PORT')


try:
    SAML_KEYS = json.loads(base64.b64decode(env('SAML_KEYS')))
except ImproperlyConfigured:
    pass

SAML_ALLOWED_HOSTS = env.list('SAML_ALLOWED_HOSTS')

CLOUDWATCH_QUEUE_TIME_ACCESS_KEY = env('CLOUDWATCH_QUEUE_TIME_ACCESS_KEY')
CLOUDWATCH_QUEUE_TIME_SECRET_KEY = env('CLOUDWATCH_QUEUE_TIME_SECRET_KEY')
CLOUDWATCH_QUEUE_TIME_REGION = env('CLOUDWATCH_QUEUE_TIME_REGION')
CLOUDWATCH_QUEUE_TIME_NAMESPACE = env('CLOUDWATCH_QUEUE_TIME_NAMESPACE')

try:
    ORTOOLS_SEARCH_TIME_LIMIT = env.int('ORTOOLS_SEARCH_TIME_LIMIT')
except ImproperlyConfigured:
    pass

try:
    ORTOOLS_SEARCH_TIME_LIMIT_WITH_PICKUP = env.int('ORTOOLS_SEARCH_TIME_LIMIT_WITH_PICKUP')
except ImproperlyConfigured:
    pass

